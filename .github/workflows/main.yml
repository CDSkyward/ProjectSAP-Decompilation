name: Build Project SAP
on:
  workflow_dispatch:
    inputs:
      windows-x86:
        type: boolean
        description: Windows (x86)
      linux: 
        type: boolean
        description: Linux
      windows-x64:
        type: boolean
        description: Windows (x64)
      android:
        type: boolean
        description: Android
      ubuntu-build-plat:
        type: choice
        description: Linux Build Platform
        options:
          - Both
          - CMake
          - Make
permissions:
  actions: read
  contents: read
env:
  GENERAL_FLAGS: "-DCMAKE_BUILD_TYPE=Release"
  GENERAL_LINUX_FLAGS: "-DCMAKE_CXX_FLAGS='-U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0'"
  
jobs:
  sap-windows:
    if: ${{ github.event.inputs.windows-x86 == 'true' }}  
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1
      - name: Cache Stuff
        id: cache
        uses: actions/cache@v4
        env:
          cache-name: cache-win-dependencies
        with:
          path: ./dependencies/windows
          key: ${{ runner.os }}
          restore-keys: |
            ${{ runner.os }}
      - if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        name: Download libogg and libvorbis for easier includes
        run: |
          Invoke-WebRequest -Uri "https://ftp.osuosl.org/pub/xiph/releases/ogg/libogg-1.3.5.zip" -OutFile "libogg.zip"
          Expand-Archive -Path libogg.zip -DestinationPath ./dependencies/windows/
          Rename-Item ./dependencies/windows/libogg-1.3.5 libogg
          Invoke-WebRequest -Uri "https://ftp.osuosl.org/pub/xiph/releases/vorbis/libvorbis-1.3.7.zip" -OutFile "libvorbis.zip"
          Expand-Archive -Path libvorbis.zip -DestinationPath ./dependencies/windows/
          Rename-Item ./dependencies/windows/libvorbis-1.3.7 libvorbis
      - if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        name: Download GLEW
        run: |
          Invoke-WebRequest -Uri "https://github.com/nigels-com/glew/releases/download/glew-2.2.0/glew-2.2.0-win32.zip" -OutFile "GLEW.zip"
          Expand-Archive -Path GLEW.zip -DestinationPath ./dependencies/windows/
          Rename-Item ./dependencies/windows/glew-2.2.0 glew
      - if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        name: Download SDL2
        run: |
          Invoke-WebRequest -Uri "https://libsdl.org/release/SDL2-devel-2.0.14-VC.zip" -OutFile "SDL2.zip"
          Expand-Archive -Path SDL2.zip -DestinationPath ./dependencies/windows/
          Rename-Item ./dependencies/windows/SDL2-2.0.14 SDL2
      - if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        name: Download Theora
        run: |
         Invoke-WebRequest -Uri "https://ftp.osuosl.org/pub/xiph/releases/theora/libtheora-1.1.1.zip" -OutFile "libtheora.zip"
         Expand-Archive -Path libtheora.zip -DestinationPath ./dependencies/all
         Rename-Item ./dependencies/all/libtheora-1.1.1 libtheora
      - name: Restore vcpkg cache
        id: vcpkg-cache-x86
        uses: TAServers/vcpkg-cache@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: CMake Configure
        env:
          VCPKG_FEATURE_FLAGS: "binarycaching" # Possibly redundant, but explicitly sets the binary caching feature flag
          VCPKG_BINARY_SOURCES: "clear;files,${{ steps.vcpkg-cache-x86.outputs.path }},readwrite"
        run: |
          vcpkg install libogg:x86-windows-static-md libvorbis:x86-windows-static libtheora:x86-windows-static 
          vcpkg integrate install
      - name: Build SAP
        run: |
          msbuild RSDKv4.sln /p:Configuration=Release /p:Platform=x86 /p:ForceImportBeforeCppTargets="$env:GITHUB_WORKSPACE/props/winactions.props"
      - name: Move artifacts
        run: |
          mkdir artifacts
          move ./build/Win32/Release/*.dll ./artifacts 
          move ./build/Win32/Release/*.exe ./artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sap-windows
          path: artifacts
  sap-windows-x64:
    if: ${{ github.event.inputs.windows-x64 == 'true' }}
    runs-on: windows-2022
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1
      - name: Cache Stuff
        id: cache
        uses: actions/cache@v4
        env:
          cache-name: cache-win-dependencies
        with:
          path: ./dependencies/windows
          key: ${{ runner.os }}
          restore-keys: |
            ${{ runner.os }}
      - if: ${{ steps.cache.outputs.cache-hit != 'true' }}    
        name: Download libogg and libvorbis for easier includes
        run: |
          Invoke-WebRequest -Uri "https://ftp.osuosl.org/pub/xiph/releases/ogg/libogg-1.3.5.zip" -OutFile "libogg.zip"
          Expand-Archive -Path libogg.zip -DestinationPath ./dependencies/windows/
          Rename-Item ./dependencies/windows/libogg-1.3.5 libogg
          Invoke-WebRequest -Uri "https://ftp.osuosl.org/pub/xiph/releases/vorbis/libvorbis-1.3.7.zip" -OutFile "libvorbis.zip"
          Expand-Archive -Path libvorbis.zip -DestinationPath ./dependencies/windows/
          Rename-Item ./dependencies/windows/libvorbis-1.3.7 libvorbis
      - if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        name: Download GLEW
        run: |
          Invoke-WebRequest -Uri "https://github.com/nigels-com/glew/releases/download/glew-2.2.0/glew-2.2.0-win32.zip" -OutFile "GLEW.zip"
          Expand-Archive -Path GLEW.zip -DestinationPath ./dependencies/windows/
          Rename-Item ./dependencies/windows/glew-2.2.0 glew
      - if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        name: Download SDL2
        run: |
          Invoke-WebRequest -Uri "https://libsdl.org/release/SDL2-devel-2.0.14-VC.zip" -OutFile "SDL2.zip"
          Expand-Archive -Path SDL2.zip -DestinationPath ./dependencies/windows/
          Rename-Item ./dependencies/windows/SDL2-2.0.14 SDL2
      - if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        name: Download Theora
        run: |
         Invoke-WebRequest -Uri "https://ftp.osuosl.org/pub/xiph/releases/theora/libtheora-1.1.1.zip" -OutFile "libtheora.zip"
         Expand-Archive -Path libtheora.zip -DestinationPath ./dependencies/all
         Rename-Item ./dependencies/all/libtheora-1.1.1 libtheora
      - name: Restore vcpkg cache
        id: vcpkg-cache-x64
        uses: TAServers/vcpkg-cache@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: CMake Configure
        env:
          VCPKG_FEATURE_FLAGS: "binarycaching" # Possibly redundant, but explicitly sets the binary caching feature flag
          VCPKG_BINARY_SOURCES: "clear;files,${{ steps.vcpkg-cache-x64.outputs.path }},readwrite"
        run: |
          vcpkg install libogg:x64-windows-static-md libvorbis:x64-windows-static-md libtheora
          vcpkg integrate install
      - name: Build SAP
        run: |
          msbuild RSDKv4.sln /p:Configuration=Release /p:Platform=x64 /p:ForceImportBeforeCppTargets="$env:GITHUB_WORKSPACE/props/winactions_x64.props"
      - name: Move artifacts
        run: |
          mkdir artifacts
          move ./build/x64/Release/*.dll ./artifacts 
          move ./build/x64/Release/*.exe ./artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sap-windows-x64
          path: artifacts
  sap-ubuntu-make:
      if: ${{ (github.event.inputs.linux == 'true') && (github.event.inputs.ubuntu-build-plat == 'Make' || github.event.inputs.ubuntu-build-plat == 'Both') }}
      runs-on: ubuntu-latest
      steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install build-essential git libsdl2-dev libtheora-dev libogg-dev libvorbis-dev libglew-dev libglfw3-dev
          ls ./dependencies/all
      - name: Build SAP Ubuntu (Make)
        run: make
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: SAP Ubuntu (Make)
          path: bin
  sap-ubuntu-cmake:
    if: ${{ (github.event.inputs.linux == 'true') && (github.event.inputs.ubuntu-build-plat == 'CMake' || github.event.inputs.ubuntu-build-plat == 'Both') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install build-essential git libsdl2-dev libtheora-dev libogg-dev libvorbis-dev libglfw3-dev libglew-dev
      - name: Build SAP Ubuntu (CMake)
        run: |
          cmake -B build ${{env.GENERAL_FLAGS}} ${{env.GENERAL_LINUX_FLAGS}}
          cmake --build build --parallel
      - name: Move artifacts
        run: |
          mkdir artifacts
          mv "./build/WZ+ (CMake)" ./artifacts
          strip "./artifacts/WZ+ (CMake)"
          tar -czvf linux.tar.gz -C ./artifacts .
      # tar the executables so that they don't lose exec permissions
      # see: https://github.com/actions/upload-artifact?tab=readme-ov-file#permission-loss
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: SAP Ubuntu (CMake)
          path: linux.tar.gz
  sap-android:
    if: ${{ github.event.inputs.android == 'true' }}
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive      
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1
      - name: Cache Stuff
        id: cache-android
        uses: actions/cache@v4
        env:
          cache-name: cache-android-dependencies
        with:
          path: ./dependencies/android
          key: ${{ runner.os }}-Android
          restore-keys: |
            ${{ runner.os }}-Android
      - if: ${{ steps.cache-android.outputs.cache-hit != 'true' }}
        name: Download libogg, libvorbis, and libtheora for easier includes
        run : |
          Invoke-WebRequest -Uri "https://ftp.osuosl.org/pub/xiph/releases/vorbis/libvorbis-1.3.7.zip" -OutFile "libvorbis.zip"
          Expand-Archive -Path libvorbis.zip -DestinationPath ./dependencies/android/
          Rename-Item ./dependencies/android/libvorbis-1.3.7 libvorbis
          Invoke-WebRequest -Uri "https://ftp.osuosl.org/pub/xiph/releases/ogg/libogg-1.3.5.zip" -OutFile "libogg.zip"
          Expand-Archive -Path libogg.zip -DestinationPath ./dependencies/android/app/jni/src/dependencies/android/
          Rename-Item ./dependencies/android/app/jni/src/dependencies/android/libogg-1.3.5 libogg
          Invoke-WebRequest -Uri "https://ftp.osuosl.org/pub/xiph/releases/vorbis/libvorbis-1.3.7.zip" -OutFile "libvorbis.zip"
          Expand-Archive -Path libvorbis.zip -DestinationPath ./dependencies/android/app/jni/src/dependencies/android/
          Rename-Item ./dependencies/android/app/jni/src/dependencies/android/libvorbis-1.3.7 libvorbis
      - if: ${{ steps.cache-android.outputs.cache-hit != 'true' }}
        name: Download Theora
        run: |
         Invoke-WebRequest -Uri "https://ftp.osuosl.org/pub/xiph/releases/theora/libtheora-1.1.1.zip" -OutFile "libtheora.zip"
         Expand-Archive -Path libtheora.zip -DestinationPath ./dependencies/all
         Rename-Item ./dependencies/all/libtheora-1.1.1 libtheora
      - if: ${{ steps.cache-android.outputs.cache-hit != 'true' }}
        name: Download GLEW
        run: |
          Invoke-WebRequest -Uri "https://github.com/nigels-com/glew/releases/download/glew-2.2.0/glew-2.2.0-win32.zip" -OutFile "GLEW.zip"
          Expand-Archive -Path GLEW.zip -DestinationPath ./dependencies/android/
          Rename-Item ./dependencies/android/glew-2.2.0 glew
      - if: ${{ steps.cache-android.outputs.cache-hit != 'true' }}
        name: Download SDL2
        run: |
          Invoke-WebRequest -Uri "https://libsdl.org/release/SDL2-2.0.16.zip" -OutFile "SDL2.zip"
          Expand-Archive -Path SDL2.zip -DestinationPath ./dependencies/android/
          Rename-Item ./dependencies/android/SDL2-2.0.16 SDL
          Invoke-WebRequest -Uri "https://libsdl.org/release/SDL2-2.0.16.zip" -OutFile "SDL2.zip"
          Expand-Archive -Path SDL2.zip -DestinationPath ./android/app/jni
          Rename-Item ./android/app/jni/SDL2-2.0.16 SDL
      - name: Move & Copy stuff
        run: |
          Copy-Item -Path ./dependencies/android\* -Destination ./dependencies/
          Copy-Item -Path .dependencies/android/libogg/ -Destination ./dependencies/android/ -recurse
          Copy-Item -Path ./dependencies/android/config_types.h -Destination ./dependencies/android/libogg/include/ogg/
      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 11
      - name: Build SAP Android
        working-directory: ./android
        run: |
          ./gradlew.bat assembleDebug --no-daemon -PABIFILTERS="armeabi-v7a;arm64-v8a" 
      - name: Upload artifact Android
        uses: actions/upload-artifact@v4
        with:
          name: sap-android
          path: ./android/app/build/outputs/apk
    
    
