name: Build RSDKv4
on:
  push:
    branches:
      - windows
      - linux
      - android
      - win-actions
      - linux-actions
      - MainMenuRewrite

jobs:
  build:
    runs-on: self-hosted
    strategy:
      matrix:
        os: [windows, android, linux]
        arch: [x86, x64]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup MSBuild
        if: matrix.os == 'windows'
        uses: microsoft/setup-msbuild@v1

      - name: Install Dependencies for Windows
        if: matrix.os == 'windows'
        run: |
          # Install vcpkg if it's not already installed
          if (-not (Test-Path -Path "vcpkg")) {
              git clone https://github.com/microsoft/vcpkg.git
              cd vcpkg
              .\bootstrap-vcpkg.bat
              cd ..
          }
          echo "::add-path::$(pwd)/vcpkg"

          # Download libraries
          Invoke-WebRequest -Uri "https://ftp.osuosl.org/pub/xiph/releases/ogg/libogg-1.3.5.zip" -OutFile "libogg.zip"
          Expand-Archive -Path libogg.zip -DestinationPath ./dependencies/windows/
          Rename-Item ./dependencies/windows/libogg-1.3.5 libogg

          Invoke-WebRequest -Uri "https://ftp.osuosl.org/pub/xiph/releases/vorbis/libvorbis-1.3.7.zip" -OutFile "libvorbis.zip"
          Expand-Archive -Path libvorbis.zip -DestinationPath ./dependencies/windows/
          Rename-Item ./dependencies/windows/libvorbis-1.3.7 libvorbis

          # Run vcpkg
          vcpkg install libogg:$(if (${{ matrix.arch }} == 'x86') { 'x86-windows-static-md' } else { 'x64-windows-static-md' })
          vcpkg install libvorbis:$(if (${{ matrix.arch }} == 'x86') { 'x86-windows-static-md' } else { 'x64-windows-static-md' })
          vcpkg install libtheora:$(if (${{ matrix.arch }} == 'x86') { 'x86-windows-static-md' } else { 'x64-windows-static-md' })
          vcpkg integrate install

      - name: Build RSDKv4
        run: |
          if (${{ matrix.os }} == 'windows') {
              msbuild RSDKv4.sln /p:Configuration=Release /p:Platform=${{ matrix.arch }} /p:ForceImportBeforeCppTargets="$env:GITHUB_WORKSPACE/props/winactions.props"
              move ./build/Win32/Release/*.dll ./artifacts || echo "No DLLs found"
              move ./build/Win32/Release/*.exe ./artifacts || echo "No EXEs found"
          }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}
          path: artifacts

  v4-android:
    runs-on: self-hosted
    steps:
      - name: Checkout repository Android
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1

      - name: Download Android Dependencies
        run: |
          # Download and extract dependencies for Android here...

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          distribution: "zulu"
          java-version: 11

      - name: Build RSDKv4 Android
        working-directory: ./android
        run: |
          ./gradlew.bat Build --no-daemon -PABIFILTERS="armeabi-v7a;arm64-v8a"

      - name: Upload artifact Android
        uses: actions/upload-artifact@v4
        with:
          name: v4-android
          path: ./android/app/build/outputs/apk

  v4-linux:
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libogg-dev libvorbis-dev libsdl1.2-dev libsdl2-dev libglew-dev

      - name: Build RSDKv4
        run: make

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: v4-linux
          path: bin
